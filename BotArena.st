Object subclass: #EndlessBattery	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Modules'!!EndlessBattery commentStamp: 'federicobalaguer 7/11/2014 14:55' prior: 0!An EndlessBattery is a battery with infinite charge!!EndlessBattery methodsFor: 'consume' stamp: 'federicobalaguer 7/9/2014 09:30'!canConsume: aNumber	^ true! !!EndlessBattery methodsFor: 'consume' stamp: 'federicobalaguer 7/9/2014 09:30'!consume: aNumber	! !Object subclass: #Battery	instanceVariableNames: 'charge capacity'	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Modules'!!Battery commentStamp: '<historical>' prior: 0!I represent the robot's battery. I have a capacity and a charge that decreases, and I can recharge myself.!!Battery methodsFor: 'accessing' stamp: 'NahuelGarbezza 12/9/2012 18:00'!capacity	^ capacity! !!Battery methodsFor: 'accessing' stamp: 'NahuelGarbezza 12/9/2012 17:59'!charge	^ charge! !!Battery methodsFor: 'initialize-release' stamp: 'federicobalaguer 8/28/2014 17:01'!initialize	self capacity: self defaultCapacity.	self charge: 0.	^ self! !!Battery methodsFor: 'consume' stamp: 'NahuelGarbezza 12/9/2012 18:02'!canConsume: amount	^self charge >= amount! !!Battery methodsFor: 'consume' stamp: 'federicobalaguer 8/29/2014 13:46'!consume: amount	(self canConsume: amount)		ifTrue: [ self charge: self charge - amount ]		ifFalse: [ EmptyBatteryError signal ]! !!Battery methodsFor: 'private' stamp: 'NahuelGarbezza 12/9/2012 18:03'!capacity: anObject	capacity := anObject! !!Battery methodsFor: 'private' stamp: 'NahuelGarbezza 12/9/2012 17:59'!charge: anObject	charge := anObject! !!Battery methodsFor: 'private' stamp: 'federicobalaguer 7/11/2014 19:32'!defaultCapacity	^100! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Battery class	instanceVariableNames: ''!!Battery class methodsFor: 'instance-creation' stamp: 'federicobalaguer 7/11/2014 19:36'!fullyCharged	| instance |	^ (instance := self new)		charge: instance capacity;		yourself! !Object subclass: #BrushState	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Modules'!!BrushState commentStamp: '<historical>' prior: 0!Represento un posible estado en el que se encuentre el robot del que formo parte.!!BrushState methodsFor: 'actions' stamp: 'federicobalaguer 7/10/2014 11:28'!tracePositionFor: aRobot	self subclassResponsibility! !!BrushState methodsFor: 'actions' stamp: 'federicobalaguer 8/25/2014 16:23'!brushUpFor: aRobot	self subclassResponsibility! !!BrushState methodsFor: 'actions' stamp: 'federicobalaguer 8/25/2014 16:23'!toggleBrushFor: aRobot	self subclassResponsibility! !!BrushState methodsFor: 'actions' stamp: 'federicobalaguer 8/25/2014 16:23'!brushDownFor: aRobot	self subclassResponsibility! !!BrushState methodsFor: 'testing' stamp: 'NahuelGarbezza 12/9/2012 18:33'!isDown	self subclassResponsibility! !!BrushState methodsFor: 'testing' stamp: 'NahuelGarbezza 12/9/2012 18:33'!isUp 	self subclassResponsibility! !BrushState subclass: #BrushDown	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Modules'!!BrushDown commentStamp: '<historical>' prior: 0!I represent the state of a robot in which the brush is down.!!BrushDown methodsFor: 'actions' stamp: 'federicobalaguer 8/25/2014 16:23'!brushUpFor: aRobot	aRobot state: BrushUp new! !!BrushDown methodsFor: 'actions' stamp: 'federicobalaguer 8/25/2014 16:23'!toggleBrushFor: aRobot	self brushUpFor: aRobot! !!BrushDown methodsFor: 'actions' stamp: 'federicobalaguer 8/25/2014 16:23'!brushDownFor: aRobot	"Nothing to do"! !!BrushDown methodsFor: 'testing' stamp: 'NahuelGarbezza 12/9/2012 18:33'!isDown	^true! !!BrushDown methodsFor: 'testing' stamp: 'NahuelGarbezza 12/9/2012 18:33'!isUp	^false! !!BrushDown methodsFor: 'printing' stamp: 'federicobalaguer 8/28/2014 16:29'!tracePositionFor: aRobot	|  bodyCell |	bodyCell := aRobot body cell.		bodyCell color: Color black! !!BrushDown methodsFor: 'printing' stamp: 'NahuelGarbezza 12/9/2012 18:38'!printOn: aStream	aStream << 'Brush down'! !BrushState subclass: #BrushUp	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Modules'!!BrushUp commentStamp: '<historical>' prior: 0!I represent the state of a robot in which the brush is up.!!BrushUp methodsFor: 'actions' stamp: 'federicobalaguer 7/10/2014 11:32'!tracePositionFor: aRobot	"	nothing to do"	! !!BrushUp methodsFor: 'actions' stamp: 'federicobalaguer 8/25/2014 16:23'!brushUpFor: aRobot	"Nothing to do"! !!BrushUp methodsFor: 'actions' stamp: 'federicobalaguer 8/25/2014 16:23'!toggleBrushFor: aRobot	self brushDownFor: aRobot! !!BrushUp methodsFor: 'actions' stamp: 'federicobalaguer 8/25/2014 16:23'!brushDownFor: aRobot	"aRobot startNewPath."	aRobot state: BrushDown new.! !!BrushUp methodsFor: 'testing' stamp: 'NahuelGarbezza 12/9/2012 18:33'!isDown	^false! !!BrushUp methodsFor: 'testing' stamp: 'NahuelGarbezza 12/9/2012 18:33'!isUp	^true! !!BrushUp methodsFor: 'printing' stamp: 'NahuelGarbezza 12/9/2012 18:36'!printOn: aStream	aStream << 'Brush up'! !ComposableModel subclass: #MethodList	instanceVariableNames: 'label protocols'	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-MiniBrowser'!!MethodList commentStamp: 'ArturoZambrano 8/24/2014 21:19' prior: 0!A MethodList  is part of the MinimalBrowser, it lists the methods for a class.!!MethodList methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 8/11/2014 23:41'!label:aString   label text:aString.! !!MethodList methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 8/11/2014 23:41'!whenSelectedItemChanged: aBlock	protocols whenSelectedItemChanged: aBlock! !!MethodList methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 8/11/2014 23:41'!label ^label! !!MethodList methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 8/11/2014 23:41'!items:aCollection protocols items:aCollection.! !!MethodList methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 8/11/2014 23:41'!initializeWidgets	protocols := self newList.	label := self newLabel.	label text: 'Protocol'.	protocols displayBlock: [ :m | m selector  ].	self focusOrder add: protocols! !!MethodList methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 8/11/2014 23:41'!protocols ^protocols! !!MethodList methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 8/11/2014 23:41'!text:aString   label text:aString.! !!MethodList methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 8/11/2014 23:41'!resetSelection protocols resetSelection ! !!MethodList methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 8/11/2014 23:41'!title  ^'Art-Protocol Widget tutorial'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MethodList class	instanceVariableNames: ''!!MethodList class methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 8/11/2014 23:41'!defaultSpec	<spec: #default>	^ SpecLayout composed		newColumn: [ :column | 					column						add: #label height: self toolbarHeight;						add: #protocols ];		yourself! !ComposableModel subclass: #MinimalBrowser	instanceVariableNames: 'list text klass'	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-MiniBrowser'!!MinimalBrowser commentStamp: 'ArturoZambrano 8/24/2014 21:20' prior: 0!MinimalBrowser shows the definition of instance methods for a given class. It depends on Spec.!!MinimalBrowser methodsFor: 'protocol' stamp: 'ArturoZambrano 8/11/2014 23:30'!klass: aClass klass:= aClass.! !!MinimalBrowser methodsFor: 'protocol' stamp: 'ArturoZambrano 8/13/2014 21:27'!title^ 'MiniBrowser on: ', klass name.! !!MinimalBrowser methodsFor: 'protocol' stamp: 'ArturoZambrano 8/11/2014 15:13'!initialExtent^ 750@600! !!MinimalBrowser methodsFor: 'protocol' stamp: 'ArturoZambrano 8/11/2014 23:10'!list^ list! !!MinimalBrowser methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 8/11/2014 15:13'!text	   ^text	! !!MinimalBrowser methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 8/30/2014 20:14'!updateMessagesAndCode	list items: klass methodDictionary keys sorted.	list label: 'Methods'.	list protocols displayBlock: [ :m | m ].	text behavior: klass.	text aboutToStyle: true! !!MinimalBrowser methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 8/30/2014 20:15'!initializePresenter	list		whenSelectedItemChanged: [ :item | item ifNil: [ text text: '' ] ifNotNil: [ text text: (klass methodNamed: item) sourceCode ] ].	text		whenTextIsAccepted: [ :newText | 		       klass compile: newText.				self updateMessagesAndCode.			]! !!MinimalBrowser methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 8/30/2014 20:14'!initializeWidgets	text := self newText.	list := self instantiate: MethodList.	self updateMessagesAndCode.	self focusOrder		add: list;		add: text! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MinimalBrowser class	instanceVariableNames: ''!!MinimalBrowser class methodsFor: 'spec' stamp: 'ArturoZambrano 8/11/2014 23:09'!defaultSpec	<spec: #default>	^ SpecLayout composed		newColumn: [ :col | 					col						add: #list;						add: #text ];		yourself! !!MinimalBrowser class methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 8/30/2014 20:20'!on:aClass ^self basicNew		klass: aClass; initialize;		yourself! !BGSRobot subclass: #RandomTraceRobot	instanceVariableNames: 'simulation traceOn stepsToGo'	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Robots'!!RandomTraceRobot methodsFor: 'exploring' stamp: 'federicobalaguer 6/26/2014 10:11'!sensedPositions	^self rangeSensorBelt sensedPositions! !!RandomTraceRobot methodsFor: 'exploring' stamp: 'federicobalaguer 6/26/2014 10:12'!rangeSensorBelt	^self body part: #rangeSensorBelt! !!RandomTraceRobot methodsFor: 'bot compatibility' stamp: 'federicobalaguer 8/6/2014 15:48'!isBrushUp	^ false! !!RandomTraceRobot methodsFor: 'bot compatibility' stamp: 'federicobalaguer 8/28/2014 13:17'!north"nothing to do"! !!RandomTraceRobot methodsFor: 'bot compatibility' stamp: 'federicobalaguer 8/20/2014 14:25'!brushDown	self traceOn! !!RandomTraceRobot methodsFor: 'bot compatibility' stamp: 'federicobalaguer 8/6/2014 15:50'!east	! !!RandomTraceRobot methodsFor: 'bot compatibility' stamp: 'federicobalaguer 8/20/2014 14:25'!brushUp	self traceOff! !!RandomTraceRobot methodsFor: 'bot compatibility' stamp: 'federicobalaguer 8/6/2014 15:50'!direction: aNumber	! !!RandomTraceRobot methodsFor: 'bot compatibility' stamp: 'federicobalaguer 8/6/2014 15:50'!south! !!RandomTraceRobot methodsFor: 'bot compatibility' stamp: 'federicobalaguer 8/6/2014 15:51'!west! !!RandomTraceRobot methodsFor: 'bot compatibility' stamp: 'federicobalaguer 8/6/2014 15:50'!direction	^ 0! !!RandomTraceRobot methodsFor: 'bot compatibility' stamp: 'federicobalaguer 8/6/2014 15:48'!isBrushDown	^ true! !!RandomTraceRobot methodsFor: 'testing' stamp: 'federicobalaguer 6/26/2014 15:09'!hasStepsToGo	^ stepsToGo > 0! !!RandomTraceRobot methodsFor: 'testing' stamp: 'federicobalaguer 8/20/2014 13:55'!isIdle	^ self hasStepsToGo not! !!RandomTraceRobot methodsFor: 'stepping' stamp: 'federicobalaguer 6/26/2014 13:24'!traceOff	traceOn := false! !!RandomTraceRobot methodsFor: 'stepping' stamp: 'federicobalaguer 6/26/2014 13:23'!traceOn	traceOn := true! !!RandomTraceRobot methodsFor: 'stepping' stamp: 'federicobalaguer 6/26/2014 13:26'!step	| bodyCell |	bodyCell := self body cell.	"bodyCell color = Color gray"	traceOn		ifTrue: [ bodyCell color: Color black ].	self turnBy: (-2 to: 2) atRandom.	self goForward.	self changed! !!RandomTraceRobot methodsFor: 'stepping' stamp: 'federicobalaguer 6/26/2014 15:19'!move: aNumber	stepsToGo := aNumber.	self changed! !!RandomTraceRobot methodsFor: 'stepping' stamp: 'federicobalaguer 6/26/2014 13:41'!goForward	stepsToGo > 0		ifTrue: [ 			super goForward.			stepsToGo := stepsToGo - 1 ]! !!RandomTraceRobot methodsFor: 'initialize-release' stamp: 'federicobalaguer 7/3/2014 10:35'!bodyClass 	^BGSRobotBodyWithFrontRangeSensor "BGSRangeSensorBeltRobotBody" ! !!RandomTraceRobot methodsFor: 'initialize-release' stamp: 'federicobalaguer 6/26/2014 10:10'!jumpTo: aPoint in: terrain	super jumpTo: aPoint in: terrain.	self addDependent: terrain.	self changed! !!RandomTraceRobot methodsFor: 'initialize-release' stamp: 'federicobalaguer 6/26/2014 13:42'!initialize	super initialize.	traceOn := true.	stepsToGo := 0.	body heading: 0 @ 1! !OTFRobot subclass: #WalkingBrushRobot	instanceVariableNames: 'battery state'	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Robots'!!WalkingBrushRobot commentStamp: '<historical>' prior: 0!I am a robot and I am able to do simple things like move through a certain space, leaving marks of the paths I am doing. I have a battery that consumes itself according to my moves, and can be recharged at every moment.!!WalkingBrushRobot methodsFor: 'battery' stamp: 'NahuelGarbezza 12/9/2012 18:21'!battery	^ battery! !!WalkingBrushRobot methodsFor: 'battery' stamp: 'NahuelGarbezza 12/9/2012 18:21'!battery: aBattery	battery := aBattery! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'federicobalaguer 7/7/2014 23:44'!east	self direction: 90! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'ArturoZambrano 9/5/2014 20:45'!quarter self direction: self direction + 90.! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'federicobalaguer 7/7/2014 23:45'!west	self direction: 270! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'federicobalaguer 7/8/2014 13:14'!direction	^ self directionMap keyAtValue: self heading! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'federicobalaguer 7/7/2014 23:45'!south	self direction: 180! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'federicobalaguer 8/25/2014 23:16'!direction: aDirection	"aDirection should be 0, 45, 90,  135, 180, 225, 270, 315"	(aDirection \\ 45 = 0 and: [ aDirection between: 0 and: 360 ])		ifTrue: [ self setDirection: aDirection ]! !!WalkingBrushRobot methodsFor: 'direction' stamp: 'federicobalaguer 7/7/2014 23:45'!north	self direction: 0! !!WalkingBrushRobot methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 9/3/2014 11:59'!moveDos   self move:2.! !!WalkingBrushRobot methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 9/3/2014 12:03'!moveTres  self move:3.! !!WalkingBrushRobot methodsFor: 'initialize-release' stamp: 'federicobalaguer 8/12/2014 13:40'!initialize	super initialize.		self state: self initialState.	self headingFromDirection: 0.	^ self! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'federicobalaguer 7/10/2014 17:15'!move: aDistance	(self battery canConsume: aDistance)		ifTrue: [ self setStepsToGo: aDistance ]		ifFalse: [ EmptyBatteryError signal ]! !!WalkingBrushRobot methodsFor: 'positioning' stamp: 'federicobalaguer 7/8/2014 15:14'!position	^ self body position! !!WalkingBrushRobot methodsFor: 'brush' stamp: 'federicobalaguer 8/25/2014 16:23'!brushUp	self setBrushCommand: [ self state brushUpFor: self ]! !!WalkingBrushRobot methodsFor: 'brush' stamp: 'NahuelGarbezza 12/9/2012 18:33'!isBrushDown	^self state isDown! !!WalkingBrushRobot methodsFor: 'brush' stamp: 'federicobalaguer 8/25/2014 16:23'!brushDown	self setBrushCommand: [ self state brushDownFor: self ]! !!WalkingBrushRobot methodsFor: 'brush' stamp: 'NahuelGarbezza 12/9/2012 18:33'!isBrushUp	^self state isUp! !!WalkingBrushRobot methodsFor: 'private' stamp: 'NahuelGarbezza 12/9/2012 18:24'!state: aState	state := aState! !!WalkingBrushRobot methodsFor: 'private' stamp: 'NahuelGarbezza 12/9/2012 18:36'!initialState	^BrushUp new! !!WalkingBrushRobot methodsFor: 'private' stamp: 'federicobalaguer 8/12/2014 16:05'!setBrushCommand: aBlock	self addCommand: (OTFCommand actionBlock: aBlock)! !!WalkingBrushRobot methodsFor: 'private' stamp: 'NahuelGarbezza 12/9/2012 18:23'!state	^ state! !!WalkingBrushRobot methodsFor: 'private' stamp: 'federicobalaguer 7/10/2014 15:33'!handleStep: aDistance	self state tracePositionFor: self.	self battery consume: aDistance! !!WalkingBrushRobot methodsFor: 'printing' stamp: 'NahuelGarbezza 12/9/2012 18:39'!printOn: aStream	aStream		nextPutAll: 'Robot at ';		nextPutAll: self position printString;		nextPutAll: ', direction ';		nextPutAll: self direction printString.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WalkingBrushRobot class	instanceVariableNames: ''!!WalkingBrushRobot class methodsFor: 'instance creation' stamp: 'federicobalaguer 7/11/2014 19:37'!newWithPosition: aPosition	^ self new		position: aPosition;		battery: Battery fullyCharged;		yourself! !!WalkingBrushRobot class methodsFor: 'instance creation' stamp: 'federicobalaguer 7/11/2014 15:00'!withoutBattery	^ self new		battery: EndlessBattery new;		yourself! !!WalkingBrushRobot class methodsFor: 'instance creation' stamp: 'federicobalaguer 7/11/2014 19:37'!withBattery	^ self new		battery: Battery fullyCharged ;		yourself! !BGSWall subclass: #BGSCastleWall	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Castle'!!BGSCastleWall methodsFor: 'as yet unclassified' stamp: 'DiegoTorres 8/30/2014 13:56'!bot! !OnTheFlyConfigurableSimulation subclass: #CastleSimulation	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Castle'!!CastleSimulation methodsFor: 'as yet unclassified' stamp: 'DiegoTorres 8/30/2014 13:46'!terrainClass^BGSCastleExample! !!CastleSimulation methodsFor: 'as yet unclassified' stamp: 'DiegoTorres 9/2/2014 21:35'!createAndDeployRobot: aName	^self createAndDeployRobot: aName position:  (self terrain emptyCellPositions atRandom).! !BGSGrid subclass: #BGSCastleExample	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Castle'!!BGSCastleExample methodsFor: 'as yet unclassified' stamp: 'DiegoTorres 9/1/2014 11:40'!buildWalls	"Left eye"		self addWallAt: 20@20 extent: 3@3.	self addWallAt: 30@20 extent: 3@3.				self addWallAt: 30@30 extent: 3@3.		self addWallAt: 20@30 extent: 3@3.		self addWallAt: 23@23 extent:7@7.	! !!BGSCastleExample methodsFor: 'as yet unclassified' stamp: 'DiegoTorres 8/30/2014 13:55'!addWallAt: origin extent: widthAndHeight	| corner |	corner := origin + widthAndHeight - 1.	origin x to: corner x do: [:x|		origin y to: corner y do: [:y|			self put: BGSCastleWall new inCellAt: x@y]].	self changed! !BGSGridView subclass: #BotArenaGridView	instanceVariableNames: 'colorMap container'	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Core'!!BotArenaGridView methodsFor: 'initialize - release' stamp: 'federicobalaguer 8/6/2014 12:29'!cellAtAbsolutePosition: position	| clickedCell topLeftCellOriginPosition |	topLeftCellOriginPosition := (self boxForCellAt: (1@1)) origin.	clickedCell := ((position - topLeftCellOriginPosition) // self cellFrameExtent).		clickedCell := clickedCell + (1@1).	^clickedCell.	! !!BotArenaGridView methodsFor: 'initialize - release' stamp: 'federicobalaguer 8/19/2014 16:09'!initialize 	super initialize.	self on: #mouseDown send: #mouseDownEvt: to: self.	! !!BotArenaGridView methodsFor: 'initialize - release' stamp: 'federicobalaguer 8/20/2014 08:39'!mouseDownEvt: evt	| cellPosition clickedCell |	cellPosition := self cellAtAbsolutePosition: evt position.	clickedCell := self grid contentOfCellAt: cellPosition.	evt redButtonPressed		ifTrue: [ 			clickedCell isNil				ifTrue: [ container handleRedButtonOnEmptyCell: cellPosition ]				ifFalse: [ clickedCell bot inspect ] ].	evt yellowButtonPressed		ifTrue: [ 			clickedCell notNil				ifTrue: [ container handleYellowButtonOnBot: clickedCell bot ] ]! !!BotArenaGridView methodsFor: 'initialize - release' stamp: 'federicobalaguer 8/19/2014 16:19'!container: arenaWindow	container := arenaWindow! !Object subclass: #ArenaBehavior	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Core'!!ArenaBehavior methodsFor: 'private' stamp: 'federicobalaguer 8/14/2014 15:20'!makeButton:  aString action: actionSelector state: stateSelector target: target	| btn labelMorph |	btn := PluggableButtonMorph 		on: target		getState: stateSelector		action: actionSelector.	labelMorph := StringMorph contents: aString.	labelMorph emphasis: 1.	btn		label: labelMorph;		useRoundedCorners;		hResizing: #spaceFill;		onColor: target onButtonColor offColor: target offButtonColor;		borderWidth: 2;		borderColor: #raised.	btn label color: Color darkGray.	btn extent: target buttonsWidth @ 50. "50 is not an important value since it will be changed by the enclosing alignment morph"	^btn! !!ArenaBehavior methodsFor: 'initialiaze' stamp: 'federicobalaguer 8/20/2014 09:38'!createAndDeployRobotsOn: simulation	self subclassResponsibility! !!ArenaBehavior methodsFor: 'initialiaze' stamp: 'federicobalaguer 8/27/2014 11:28'!createAndDeployRobotsOn: simulation from: arenaWindow	self subclassResponsibility! !!ArenaBehavior methodsFor: 'initialiaze' stamp: 'federicobalaguer 8/27/2014 12:07'!initializeBindingsFor: arenaWindow	self subclassResponsibility! !!ArenaBehavior methodsFor: 'callback' stamp: 'federicobalaguer 8/20/2014 09:47'!handleYellowButtonOnBot: cellPosition window: arenaWindow	^ self subclassResponsibility! !!ArenaBehavior methodsFor: 'callback' stamp: 'federicobalaguer 8/20/2014 09:46'!handleRedButtonOnEmptyCell: cellPosition window: arenaWindow	^ self subclassResponsibility! !!ArenaBehavior methodsFor: 'callback' stamp: 'federicobalaguer 8/20/2014 09:47'!resetSimulation: arenaWindow	^ self subclassResponsibility! !ArenaBehavior subclass: #BasicArenaBehavior	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Core'!!BasicArenaBehavior methodsFor: 'initialize' stamp: 'federicobalaguer 8/26/2014 16:35'!createAndDeployRobotsOn: simulation	simulation createAndDeployRobot: 'robotech' position: simulation terrain extent / 2.	! !!BasicArenaBehavior methodsFor: 'initialize' stamp: 'federicobalaguer 8/27/2014 12:11'!createAndDeployRobotsOn: simulation from: arenaWindow	self createAndDeployRobotsOn: simulation.	self initializeBindingsFor: arenaWindow .	simulation robots notEmpty		ifTrue: [ arenaWindow  addBinding: #robotech object: simulation robots first ]! !!BasicArenaBehavior methodsFor: 'initialize' stamp: 'federicobalaguer 8/28/2014 15:35'!initializeBindingsFor: arenaWindow	| binding auxbat |	binding := arenaWindow cleanBindings.	binding		at: #backupBattery		put:			((auxbat := Battery new)				charge: auxbat defaultCapacity;				yourself).	binding at: #endlessBattery put: EndlessBattery new! !!BasicArenaBehavior methodsFor: 'buttons creations' stamp: 'federicobalaguer 8/20/2014 13:02'!addButtonsToPanel: panel of: aWindow	| resetBtn wrkSpaceBtn browserBtn objectListBtn |	resetBtn := self		makeButton: 'Reset'		action: #resetSimulation		state: #canResetSimulation		target: aWindow.	wrkSpaceBtn := self		makeButton: 'Open Workspace'		action: #openWorkspaceWithContent		state: #hasWorkspace		target: aWindow .	browserBtn := self		makeButton: 'Browse Definition'		action: #openBrowserOnRobot		state: #hasBrowser		target: aWindow .	objectListBtn := self		makeButton: 'Available Objects'		action: #browseAvailableObjects		state: #canResetSimulation		target: aWindow .	{resetBtn.	wrkSpaceBtn.	browserBtn.	objectListBtn} do: [ :button | panel addMorph: button ]! !!BasicArenaBehavior methodsFor: 'callback' stamp: 'federicobalaguer 8/20/2014 11:13'!handleYellowButtonOnBot: aRobot window: arenaWindow	! !!BasicArenaBehavior methodsFor: 'callback' stamp: 'federicobalaguer 8/20/2014 09:44'!handleRedButtonOnEmptyCell: cellPosition window: arenaWindow! !!BasicArenaBehavior methodsFor: 'callback' stamp: 'federicobalaguer 8/27/2014 12:23'!resetSimulation: arenaWindow	arenaWindow simulation reset.	self createAndDeployRobotsOn: arenaWindow simulation from: arenaWindow! !ArenaBehavior subclass: #EnhancedArenaBehavior	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Core'!!EnhancedArenaBehavior methodsFor: 'initialiaze' stamp: 'federicobalaguer 8/27/2014 12:37'!initializeBindingsFor: arenaWindow	arenaWindow cleanBindings ! !!EnhancedArenaBehavior methodsFor: 'buttons creations' stamp: 'federicobalaguer 8/14/2014 11:52'!addButtonsToPanel: panel of: aWindow	| resetBtn wrkSpaceBtn browserBtn addBotBtn|	resetBtn := self		makeButton: 'Reset'		action: #resetSimulation		state: #canResetSimulation		target: aWindow.	wrkSpaceBtn := self		makeButton: 'Open Workspace'		action: #openWorkspace		state: #hasWorkspace		target: aWindow .	browserBtn := self		makeButton: 'Browse Definition'		action: #openBrowser		state: #hasBrowser		target: aWindow .	addBotBtn := self		makeButton: 'Add Robot'		action: #addRobot		state: #canResetSimulation		target: aWindow .	{resetBtn.	wrkSpaceBtn.	browserBtn.	addBotBtn} do: [ :button | panel addMorph: button ]! !!EnhancedArenaBehavior methodsFor: 'initialize' stamp: 'federicobalaguer 8/20/2014 09:39'!createAndDeployRobotsOn: simulation! !!EnhancedArenaBehavior methodsFor: 'initialize' stamp: 'federicobalaguer 8/27/2014 12:26'!createAndDeployRobotsOn: simulation from: arenaWindow	self initializeBindingsFor: arenaWindow! !!EnhancedArenaBehavior methodsFor: 'callback' stamp: 'federicobalaguer 8/20/2014 11:13'!handleYellowButtonOnBot: aRobot window: arenaWindow	! !!EnhancedArenaBehavior methodsFor: 'callback' stamp: 'federicobalaguer 8/20/2014 09:44'!handleRedButtonOnEmptyCell: cellPosition window: arenaWindow	arenaWindow addRobotOnPosition: cellPosition! !!EnhancedArenaBehavior methodsFor: 'callback' stamp: 'federicobalaguer 8/27/2014 12:13'!resetSimulation: arenaWindow	arenaWindow simulation reset.	self initializeBindingsFor: arenaWindow! !BGSSlowedDownSimulation subclass: #OnTheFlyConfigurableSimulation	instanceVariableNames: 'robotClass constructorSelector lastBotNumber'	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Core'!!OnTheFlyConfigurableSimulation methodsFor: 'stepping' stamp: 'federicobalaguer 8/28/2014 16:16'!step	self stepCount: self stepCount + 1.	self robots		do: [ :each | 			each hasStepsToGo				ifTrue: [ each step ] ]! !!OnTheFlyConfigurableSimulation methodsFor: 'stepping' stamp: 'federicobalaguer 8/28/2014 14:11'!run	pauseFlagLock		critical: [ 			self isPaused				ifFalse: [ ^ self ].			self isPaused: false ].	[ self runLoop ] forkAt: Processor userInterruptPriority! !!OnTheFlyConfigurableSimulation methodsFor: 'testing' stamp: 'federicobalaguer 8/19/2014 14:46'!autoStopConditionReached	^self robots allSatisfy: [ :each| each isIdle  ]! !!OnTheFlyConfigurableSimulation methodsFor: 'initialize - release' stamp: 'federicobalaguer 8/19/2014 08:56'!initialize	super initialize.	lastBotNumber := 0! !!OnTheFlyConfigurableSimulation methodsFor: 'initialize - release' stamp: 'federicobalaguer 8/19/2014 15:44'!robotWithId: botNumber	^ (robotClass perform: constructorSelector)		id: botNumber;		yourself! !!OnTheFlyConfigurableSimulation methodsFor: 'initialize - release' stamp: 'federicobalaguer 8/11/2014 15:54'!robotClass: aClass constructorSelector: aSymbol	robotClass := aClass.	constructorSelector := aSymbol! !!OnTheFlyConfigurableSimulation methodsFor: 'initialize - release' stamp: 'federicobalaguer 8/19/2014 15:53'!createAndDeployRobot: aName	| x y |	x := (0 to: self terrain extent x) atRandom.	y := (0 to: self terrain extent y) atRandom.	^ self createAndDeployRobot: aName position: x @ y! !!OnTheFlyConfigurableSimulation methodsFor: 'initialize - release' stamp: 'federicobalaguer 8/12/2014 22:56'!robotCount	^ 0! !!OnTheFlyConfigurableSimulation methodsFor: 'initialize - release' stamp: 'federicobalaguer 8/11/2014 15:54'!robotClass: aClass	self robotClass: aClass constructorSelector: #new! !!OnTheFlyConfigurableSimulation methodsFor: 'initialize - release' stamp: 'federicobalaguer 8/12/2014 23:00'!createRobots	! !!OnTheFlyConfigurableSimulation methodsFor: 'initialize - release' stamp: 'federicobalaguer 8/12/2014 23:00'!deployRobots	! !!OnTheFlyConfigurableSimulation methodsFor: 'initialize - release' stamp: 'federicobalaguer 8/19/2014 15:54'!createAndDeployRobot: aName position: aPosition	| bot |	bot := self robotWithId: aName asSymbol.	self addRobot: bot.	bot rangeSensorBelt.	bot jumpTo: aPosition in: self terrain.	bot addDependent: self.	^ bot! !!OnTheFlyConfigurableSimulation methodsFor: 'initialize - release' stamp: 'federicobalaguer 8/11/2014 15:54'!robotClass	^ robotClass! !!OnTheFlyConfigurableSimulation methodsFor: 'dependencies' stamp: 'federicobalaguer 8/19/2014 15:05'!update: aRobot	aRobot hasStepsToGo		ifFalse: [ self pause ]		ifTrue: [ 			self isPaused				ifTrue: [ self run ] ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OnTheFlyConfigurableSimulation class	instanceVariableNames: ''!!OnTheFlyConfigurableSimulation class methodsFor: 'instance creation' stamp: 'federicobalaguer 8/11/2014 15:54'!endlessWalkingBrush	^ self basicNew		robotClass: WalkingBrushRobot constructorSelector: #withoutBattery;		initialize;		yourself! !!OnTheFlyConfigurableSimulation class methodsFor: 'instance creation' stamp: 'federicobalaguer 8/11/2014 15:54'!randomTrace	^ self basicNew		robotClass: RandomTraceRobot;		initialize;		yourself! !!OnTheFlyConfigurableSimulation class methodsFor: 'instance creation' stamp: 'federicobalaguer 8/11/2014 15:54'!batteryWalkingBrush	^ self basicNew		robotClass: WalkingBrushRobot constructorSelector: #withBattery;		initialize;		yourself! !BGSRobot subclass: #OTFRobot	instanceVariableNames: 'commands semaphore'	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Core'!!OTFRobot commentStamp: 'federicobalaguer 7/10/2014 12:03' prior: 0!OTFRobot (On-The-Fly Robot) works within OnTheFlySimulation!!OTFRobot methodsFor: 'initialize-release' stamp: 'federicobalaguer 7/4/2014 14:37'!bodyClass 	^BGSRobotBodyWithFrontRangeSensor "BGSRangeSensorBeltRobotBody" ! !!OTFRobot methodsFor: 'initialize-release' stamp: 'federicobalaguer 7/4/2014 14:37'!jumpTo: aPoint in: terrain	super jumpTo: aPoint in: terrain.	self addDependent: terrain.	self changed! !!OTFRobot methodsFor: 'initialize-release' stamp: 'federicobalaguer 8/28/2014 15:02'!initialize	super initialize.	commands := OrderedCollection new. 	semaphore := Semaphore forMutualExclusion . 	body heading: 0 @ -1! !!OTFRobot methodsFor: 'stepping' stamp: 'federicobalaguer 7/10/2014 16:06'!currentCommand	| first |	^ (first := commands first) stepsToGo > 0		ifTrue: [ first ]		ifFalse: [ self error: 'Missing Command' ]! !!OTFRobot methodsFor: 'stepping' stamp: 'federicobalaguer 7/10/2014 15:34'!goForward	self hasStepsToGo 		ifTrue: [ super goForward ]! !!OTFRobot methodsFor: 'stepping' stamp: 'federicobalaguer 8/28/2014 15:16'!step	| cmd |	(cmd := self currentCommand) executeCommand.	self handleStep: 1.	cmd hasStepsToGo		ifFalse: [ 			commands remove: cmd.			semaphore signal.			Transcript				show: 'Command removed';				cr ].	self changed! !!OTFRobot methodsFor: 'stepping' stamp: 'federicobalaguer 7/10/2014 15:33'!handleStep: aDistance	! !!OTFRobot methodsFor: 'testing' stamp: 'federicobalaguer 7/10/2014 16:12'!hasStepsToGo	^ (commands notEmpty) and: [self currentCommand hasStepsToGo ]! !!OTFRobot methodsFor: 'testing' stamp: 'federicobalaguer 8/19/2014 14:46'!isIdle	^ self hasStepsToGo not! !!OTFRobot methodsFor: 'exploring' stamp: 'federicobalaguer 7/4/2014 14:37'!sensedPositions	^self rangeSensorBelt sensedPositions! !!OTFRobot methodsFor: 'exploring' stamp: 'federicobalaguer 7/4/2014 14:37'!rangeSensorBelt	^self body part: #rangeSensorBelt! !!OTFRobot methodsFor: 'private' stamp: 'federicobalaguer 8/12/2014 16:04'!setStepsToGo: aNumber	self addCommand: (OTFCommand actionBlock: [ self goForward ] times: aNumber)! !!OTFRobot methodsFor: 'private' stamp: 'federicobalaguer 8/12/2014 16:04'!setDirection: aDirection	self addCommand: (OTFCommand actionBlock: [ self headingFromDirection: aDirection ])! !!OTFRobot methodsFor: 'private' stamp: 'federicobalaguer 8/28/2014 15:04'!addCommand: otfCommand	semaphore wait.	commands addLast: otfCommand.	Transcript		show: commands size;		cr.	self changed.	Processor yield! !!OTFRobot methodsFor: 'private' stamp: 'federicobalaguer 7/11/2014 16:40'!directionMap	^ Dictionary new		at: 0 put: 0 @ -1;		at: 45 put: 1 @ -1;		at: 90 put: 1 @ 0;		at: 135 put: 1 @ 1;		at: 180 put: 0 @ 1;		at: 225 put: -1 @ 1;		at: 270 put: -1 @ 0;		at: 315 put: -1 @ -1;		at: 360 put: 0 @ -1;		yourself! !!OTFRobot methodsFor: 'private' stamp: 'federicobalaguer 8/12/2014 13:39'!headingFromDirection: aDirection	^ self heading: (self directionMap at: aDirection)! !Error subclass: #EmptyBatteryError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Core'!!EmptyBatteryError commentStamp: '<historical>' prior: 0!I represent the error situation when the robot tries to move without enough battery charge.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EmptyBatteryError class	instanceVariableNames: ''!!EmptyBatteryError class methodsFor: 'signaling' stamp: 'NahuelGarbezza 12/9/2012 18:32'!signal	^self signal: 'No hay suficiente bateria para moverse!!'! !Object subclass: #OTFCommand	instanceVariableNames: 'actionBlock timesToGo'	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Core'!!OTFCommand methodsFor: 'testing' stamp: 'federicobalaguer 7/10/2014 15:52'!stepsToGo	^ timesToGo ! !!OTFCommand methodsFor: 'testing' stamp: 'federicobalaguer 7/10/2014 15:30'!hasStepsToGo	^ timesToGo > 0! !!OTFCommand methodsFor: 'initialize - release' stamp: 'federicobalaguer 7/10/2014 15:10'!actionBlock: aBlock timesToGo: aNumber	actionBlock := aBlock.	timesToGo := aNumber! !!OTFCommand methodsFor: 'executing' stamp: 'federicobalaguer 8/12/2014 16:08'!executeCommand	actionBlock value.	timesToGo := timesToGo - 1.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OTFCommand class	instanceVariableNames: ''!!OTFCommand class methodsFor: 'instance-creation' stamp: 'federicobalaguer 7/10/2014 15:09'!actionBlock: aBlock times: aNumber	"aBlock has no arguments, aNumber is an Integer"	^ self new		actionBlock: aBlock timesToGo: aNumber;		yourself! !!OTFCommand class methodsFor: 'instance-creation' stamp: 'federicobalaguer 8/6/2014 16:46'!actionBlock: aBlock	^ self actionBlock: aBlock times: 1! !BGSGridWindow subclass: #BGSArenaWindow	instanceVariableNames: 'simulation stepCounterMorph gridCellExtent browser factory bindings'	classVariableNames: ''	poolDictionaries: ''	category: 'BotArena-Core'!!BGSArenaWindow commentStamp: 'federicobalaguer 8/14/2014 15:59' prior: 0!BGSArenaWindow on: (OnTheFlySimulation endlessWalkingBrush).BGSArenaWindow on: (OnTheFlySimulation batteryWalkingBrush).BGSArenaWindow expertViewOn: (OnTheFlySimulation endlessWalkingBrush).BGSArenaWindow expertViewOn: (OnTheFlySimulation batteryWalkingBrush).!!BGSArenaWindow methodsFor: 'testing' stamp: 'federicobalaguer 7/3/2014 13:40'!hasBrowser	^ browser isNil! !!BGSArenaWindow methodsFor: 'testing' stamp: 'federicobalaguer 8/25/2014 17:06'!hasWorkspace	^ false! !!BGSArenaWindow methodsFor: 'testing' stamp: 'FedericoBalaguer 11/22/2011 11:25'!canResetSimulation	^self simulation isRunning not! !!BGSArenaWindow methodsFor: 'initialize-release' stamp: 'federicobalaguer 8/27/2014 12:39'!bindings	bindings ifNil: [ bindings := Dictionary new ].	^ bindings! !!BGSArenaWindow methodsFor: 'initialize-release' stamp: 'federicobalaguer 8/14/2014 15:15'!addButtonsToPanel: panel	^factory addButtonsToPanel: panel of: self ! !!BGSArenaWindow methodsFor: 'initialize-release' stamp: 'federicobalaguer 8/27/2014 12:38'!cleanBindings	self bindings removeAll.	^ bindings! !!BGSArenaWindow methodsFor: 'initialize-release' stamp: 'FedericoBalaguer 12/6/2011 18:58'!addCountersToPanel: panel 	| stepsView |	self stepCounterMorph: (LabelMorph contents: '0').	stepsView := self wrapMorph: self stepCounterMorph andAddLabel: 'Steps:'. 	panel 		addMorph: stepsView		fullFrame: (LayoutFrame 				fractions: (0 @ 0 corner: 1 @ 0)				offsets: (4 @ 4 corner: -8 @ 44))! !!BGSArenaWindow methodsFor: 'initialize-release' stamp: 'FedericoBalaguer 11/13/2011 11:56'!wrapMorph: aMorph andAddLabel: aString    "creates a wrapping panel for aMorph with  a label above it"    | column strM |    column := AlignmentMorph newColumn                wrapCentering: #topLeft;                cellPositioning: #topLeft;                hResizing: #spaceFill;                vResizing: #shrinkWrap;                borderWidth: 2;                layoutInset: 5;                color: Color transparent;                useRoundedCorners;                borderStyle: (BorderStyle complexAltInset width: 2).    column addMorph: aMorph.    strM := StringMorph contents: aString.    strM color: Color veryVeryLightGray.    column addMorph: strM.    ^ column ! !!BGSArenaWindow methodsFor: 'initialize-release' stamp: 'federicobalaguer 8/26/2014 16:40'!addBinding: aSymbol object: anObject	bindings at: aSymbol put: anObject! !!BGSArenaWindow methodsFor: 'initialize-release' stamp: 'FedericoBalaguer 12/13/2011 22:46'!newControlPanelMorph	| panel |	panel := AlignmentMorph newColumn.	panel color: Color darkGray.	panel extent: self buttonsWidth @ self gridView extent y.	self addCountersToPanel: panel.	self addButtonsToPanel: panel.	^ panel! !!BGSArenaWindow methodsFor: 'callbacks' stamp: 'federicobalaguer 8/27/2014 12:41'!addRobotOnPosition: cellPosition	| aName robot |	aName := self textEntry: 'Enter a new name' title: 'Enter Robot Name'.	aName ifNil: [ ^ self ].	bindings		at: aName		ifPresent: [ :value | self error: 'Robot name already exists: ' , aName ]		ifAbsent: [ 			robot := simulation createAndDeployRobot: aName position: cellPosition.			bindings at: aName put: robot ]! !!BGSArenaWindow methodsFor: 'callbacks' stamp: 'federicobalaguer 8/25/2014 22:42'!addRobot	| aName |	aName := self textEntry: 'Enter a new name' title: 'Enter Robot Name'.	aName ifNil: [ ^ self ].	bindings		at: aName		ifPresent: [ self error: 'Robot name already exists: ' , aName ]		ifAbsent: [ self addRobotAndBinding: aName ]! !!BGSArenaWindow methodsFor: 'callbacks' stamp: 'federicobalaguer 8/20/2014 10:50'!handleYellowButtonOnBot: aRobot	factory handleYellowButtonOnBot: aRobot window: self	! !!BGSArenaWindow methodsFor: 'callbacks' stamp: 'federicobalaguer 8/25/2014 22:55'!addRobotAndBinding: aName	| robot |	robot := simulation createAndDeployRobot: aName.	bindings at: aName put: robot! !!BGSArenaWindow methodsFor: 'callbacks' stamp: 'federicobalaguer 8/25/2014 17:15'!browseAvailableObjects	bindings inspect! !!BGSArenaWindow methodsFor: 'callbacks' stamp: 'federicobalaguer 8/27/2014 12:15'!openWorkspaceWithContent	self initializeWorkspaceContent: self openWorkspace! !!BGSArenaWindow methodsFor: 'callbacks' stamp: 'federicobalaguer 8/19/2014 16:05'!resetSimulation	| shouldReset |	self canResetSimulation		ifFalse: [ ^ self ].	shouldReset := self proceed: 'Do you really want to reset the simulation?' title: 'Reset simulation?'.	shouldReset		ifFalse: [ ^ self ].	factory resetSimulation: self! !!BGSArenaWindow methodsFor: 'callbacks' stamp: 'federicobalaguer 8/27/2014 12:20'!openWorkspace	| wrkspace |	wrkspace := Workspace new.	wrkspace openLabel: 'Robot Arena Workspace'.	self initializeWorkspaceBindings: wrkspace.	^ wrkspace ! !!BGSArenaWindow methodsFor: 'callbacks' stamp: 'ArturoZambrano 8/30/2014 20:16'!openBrowserOnRobot	(browser := MinimalBrowser on: self simulation robotClass) openWithSpec! !!BGSArenaWindow methodsFor: 'callbacks' stamp: 'federicobalaguer 7/11/2014 19:02'!openBrowser	"browser := ClassMethodBrowser new.	browser openWithSpec.	browser classes: (OrderedCollection with:  self simulation robotClass )."	"Browser fullOnClass: self simulation robotClass "	Nautilus fullOnClass: self simulation robotClass! !!BGSArenaWindow methodsFor: 'callbacks' stamp: 'federicobalaguer 8/20/2014 09:44'!handleRedButtonOnEmptyCell: cellPosition	factory handleRedButtonOnEmptyCell: cellPosition window: self! !!BGSArenaWindow methodsFor: 'accessing' stamp: 'federicobalaguer 8/27/2014 11:40'!simulation: newSimulation	simulation := newSimulation.	simulation addDependent: self.	self displayGrid: simulation terrain cellExtent: self gridCellExtent.	factory createAndDeployRobotsOn: simulation from: self.	self update: simulation! !!BGSArenaWindow methodsFor: 'accessing' stamp: 'FedericoBalaguer 5/4/2012 10:27'!gridCellExtent	^ gridCellExtent! !!BGSArenaWindow methodsFor: 'accessing' stamp: 'federicobalaguer 8/14/2014 15:14'!factory: aFactory	factory := aFactory! !!BGSArenaWindow methodsFor: 'accessing' stamp: 'FedericoBalaguer 11/10/2011 22:31'!simulation	^ simulation! !!BGSArenaWindow methodsFor: 'accessing' stamp: 'FedericoBalaguer 5/4/2012 10:27'!gridCellExtent: anObject	gridCellExtent := anObject! !!BGSArenaWindow methodsFor: 'accessing' stamp: 'FedericoBalaguer 11/10/2011 22:31'!stepCounterMorph	^ stepCounterMorph! !!BGSArenaWindow methodsFor: 'accessing' stamp: 'FedericoBalaguer 11/10/2011 22:31'!stepCounterMorph: anObject	stepCounterMorph := anObject! !!BGSArenaWindow methodsFor: 'displaying' stamp: 'federicobalaguer 8/19/2014 16:23'!displayGridView	| newExtent deltaWidth board deltaHeight |	board := AlignmentMorph newRow.	board extent: self gridView extent + (self buttonsWidth @ 0).	self gridView container: self.	board addMorphBack: self newControlPanelMorph.	board addMorphBack: self gridView.	deltaWidth := 2 * (self borderWidth + self class borderWidth).	deltaHeight := 2 * (self borderWidth + self class borderWidth) + self labelHeight.	newExtent := board fullBounds extent + (deltaWidth @ deltaHeight).	self extent: newExtent.	self addMorph: board frame: (0 @ 0 extent: 1 @ 1)! !!BGSArenaWindow methodsFor: 'displaying' stamp: 'FedericoBalaguer 11/12/2011 17:20'!simulationStatusString	self simulation autoStopConditionReached ifTrue: [^'Stop condition reached'].	self simulation isPaused ifTrue: [^'Paused'].	^'Running'! !!BGSArenaWindow methodsFor: 'displaying' stamp: 'FedericoBalaguer 12/13/2011 23:03'!update: anObject	super update: anObject.	self setLabel: self simulation name, ' - ', self simulationStatusString.	self stepCounterMorph contents: self simulation stepCount printString.! !!BGSArenaWindow methodsFor: 'private ' stamp: 'FedericoBalaguer 11/12/2011 17:45'!onButtonColor 	^Color green ! !!BGSArenaWindow methodsFor: 'private ' stamp: 'federicobalaguer 8/6/2014 12:37'!gridViewClass	^BotArenaGridView ! !!BGSArenaWindow methodsFor: 'private ' stamp: 'FedericoBalaguer 11/12/2011 17:45'!offButtonColor 	^Color white! !!BGSArenaWindow methodsFor: 'private ' stamp: 'FedericoBalaguer 12/13/2011 23:33'!buttonsWidth	^150! !!BGSArenaWindow methodsFor: 'private ' stamp: 'federicobalaguer 8/25/2014 17:03'!initializeWorkspaceContent: wrkspace	wrkspace setContent: self workspaceContent! !!BGSArenaWindow methodsFor: 'private ' stamp: 'federicobalaguer 8/25/2014 17:10'!initializeWorkspaceBindings: wrkspace	wrkspace setBindings: bindings! !!BGSArenaWindow methodsFor: 'private ' stamp: 'federicobalaguer 7/11/2014 16:35'!workspaceContent	| wst |	wst := WriteStream on: String new.	wst		nextPut: $";		nextPutAll: 'La forma de indicarle a un objeto que hacer, es mediante el envío de mensajes.';		nextPut: $";		cr;		cr;		nextPut: $";		nextPutAll: ' Para que el robot se mueva 10 celdas, le enviamos a robotech el mensaje #move: con parámetro 10';		nextPut: $";		cr;		nextPutAll: 'robotech move: 10.';		cr;		cr;		nextPut: $";		nextPutAll:				' Para que el robot se oriente hacia la derecha, le enviamos a robotech el mensaje #direction: con parámetro 90';		nextPut: $";		cr;		nextPutAll: 'robotech direction: 90.';		cr;		cr;		nextPut: $";		nextPutAll: 'Podemos enviarle a un objeto una serie de mensajes en cascada utilizando ;';		nextPut: $";		cr;		nextPutAll:				'robotech brushDown; direction: 0; move: 3; direction: 90; move: 3; direction: 180; move: 3; direction: 270; move: 3.'.	^ wst contents! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BGSArenaWindow class	instanceVariableNames: ''!!BGSArenaWindow class methodsFor: 'instance creation' stamp: 'federicobalaguer 8/20/2014 09:24'!on: aSimulation terrainCellExtent: aPoint	^ self on: aSimulation terrainCellExtent: aPoint factory: BasicArenaBehavior new! !!BGSArenaWindow class methodsFor: 'instance creation' stamp: 'FedericoBalaguer 5/4/2012 10:29'!defaultGridCellExtent 	^10@10! !!BGSArenaWindow class methodsFor: 'instance creation' stamp: 'federicobalaguer 8/14/2014 15:19'!on: aSimulation terrainCellExtent: aPoint factory: aFactory	^ self new		factory: aFactory;		gridCellExtent: aPoint;		simulation: aSimulation;			openInWorld;		yourself! !!BGSArenaWindow class methodsFor: 'instance creation' stamp: 'federicobalaguer 8/20/2014 09:24'!basicViewOn: aSimulation	^self on: aSimulation terrainCellExtent: self defaultGridCellExtent factory: (BasicArenaBehavior new)! !!BGSArenaWindow class methodsFor: 'instance creation' stamp: 'federicobalaguer 8/20/2014 13:09'!beginnerViewOn: aSimulation	^self on: aSimulation terrainCellExtent: self defaultGridCellExtent ! !!BGSArenaWindow class methodsFor: 'instance creation' stamp: 'federicobalaguer 8/20/2014 09:24'!expertViewOn: aSimulation	^ self on: aSimulation terrainCellExtent: self defaultGridCellExtent factory: EnhancedArenaBehavior new! !'From Pharo3.0 of 18 March 2013 [Latest update: #30864] on 17 April 2015 at 10:39:38.363625 am'!!Workspace methodsFor: '*BotArena' stamp: 'federicobalaguer 8/19/2014 08:58'!addBindingKey: aString value: object	((bindings includesKey: aString) and: [ (bindings at: aString) notNil ])		ifFalse: [ bindings at: aString put: object ]		ifTrue: [ self error: 'Key already in use' ]! !