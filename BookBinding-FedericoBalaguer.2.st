SystemOrganization addCategory: #'BookBinding-Core'!SystemOrganization addCategory: #'BookBinding-Test'!Object subclass: #BookBinding	instanceVariableNames: 'paperType booklets'	classVariableNames: ''	poolDictionaries: ''	category: 'BookBinding-Core'!!BookBinding class methodsFor: 'instance creation' stamp: 'FedericoBalaguer 4/26/2012 00:45'!pages: bookPages paperType: paperType	^ (self new)		pages: bookPages paperType: paperType;		yourself! !!BookBinding methodsFor: 'as yet unclassified' stamp: 'FedericoBalaguer 4/26/2012 15:36'!booklets	^ booklets! !!BookBinding methodsFor: 'accessing' stamp: 'FedericoBalaguer 4/26/2012 15:25'!bookpages	| result |	result := SortedCollection		sortBlock: [ :first :second | first isBlank not and: [ (second isBlank not and: [ first pageNumber > second pageNumber ]) not ] ].	booklets do: [ :each | each collectBookpagesOn: result ].	^ result! !!BookBinding methodsFor: 'private - initialize' stamp: 'FedericoBalaguer 4/26/2012 14:47'!computeBookletSize: bookPages	| currentSize numberOfSheets |	self normalizeBookPages: bookPages.	currentSize := paperType maxSheetNumber.	numberOfSheets := bookPages size / 4.	[ numberOfSheets \\ currentSize = 0 ] whileFalse: [ currentSize := currentSize - 1 ].	^ currentSize * 4! !!BookBinding methodsFor: 'initialize-release' stamp: 'FedericoBalaguer 4/26/2012 14:40'!initialize	booklets := OrderedCollection new! !!BookBinding methodsFor: 'private - initialize' stamp: 'FedericoBalaguer 4/26/2012 14:39'!normalizeBookPages: bookPages	[ (bookPages size \\ 4) = 0 ] whileFalse: [ bookPages addLast: BookPage blankPage ]! !!BookBinding methodsFor: 'initialize-release' stamp: 'FedericoBalaguer 4/26/2012 14:59'!pages: bookPages paperType: pType	| bookletSize start end |	paperType := pType.	bookletSize := self computeBookletSize: bookPages.	start := 1.	end := bookletSize.	bookPages size / bookletSize		timesRepeat: [ 			booklets addLast: (Booklet withPages: (bookPages copyFrom: start to: end)).			start := end + 1.			end := end + bookletSize ]! !Object subclass: #BookPage	instanceVariableNames: 'pageNumber isBlank'	classVariableNames: ''	poolDictionaries: ''	category: 'BookBinding-Core'!!BookPage class methodsFor: 'instance creation' stamp: 'FedericoBalaguer 4/23/2012 11:36'!blankPage	^ (self new)		setBlankPage;		yourself! !!BookPage class methodsFor: 'instance creation' stamp: 'FedericoBalaguer 4/23/2012 11:37'!pageNumber: aNumber	^ (self new)		setPageNumber: aNumber;		yourself! !!BookPage methodsFor: 'testing' stamp: 'FedericoBalaguer 4/23/2012 11:39'!isBlank	^ isBlank! !!BookPage methodsFor: 'as yet unclassified' stamp: 'FedericoBalaguer 4/24/2012 09:17'!pageNumber	^ pageNumber! !!BookPage methodsFor: 'initialize-release' stamp: 'FedericoBalaguer 4/23/2012 11:35'!setBlankPage	isBlank := true! !!BookPage methodsFor: 'as yet unclassified' stamp: 'FedericoBalaguer 4/23/2012 11:38'!setPageNumber: aNumber	pageNumber := aNumber.	isBlank := false! !Object subclass: #Booklet	instanceVariableNames: 'bookPages'	classVariableNames: ''	poolDictionaries: ''	category: 'BookBinding-Core'!!Booklet class methodsFor: 'instance creation' stamp: 'FedericoBalaguer 4/24/2012 08:38'!withPages: bookPages	^ (self new)		computePageOrder: bookPages;		yourself! !!Booklet methodsFor: 'accessing' stamp: 'FedericoBalaguer 4/26/2012 14:26'!collectBookpagesOn: aCollection	aCollection addAll: bookPages! !!Booklet methodsFor: 'initialize-release' stamp: 'FedericoBalaguer 4/24/2012 17:03'!computePageOrder: pages	"The size of bookPages should be even"	(pages size / 2)		timesRepeat: [ 			bookPages addLast: pages removeFirst.			bookPages addLast: pages removeLast ]! !!Booklet methodsFor: 'initialize-release' stamp: 'FedericoBalaguer 4/23/2012 11:22'!initialize	bookPages := OrderedCollection new! !!Booklet methodsFor: 'accessing' stamp: 'FedericoBalaguer 4/24/2012 09:18'!printSortedPageNumbers	^ bookPages collect: [ :each | each pageNumber ]! !!Booklet methodsFor: 'accessing' stamp: 'FedericoBalaguer 4/24/2012 09:09'!size	^ bookPages size! !Object subclass: #PaperType	instanceVariableNames: 'paperSize maxSheetNumber'	classVariableNames: ''	poolDictionaries: ''	category: 'BookBinding-Core'!!PaperType class methodsFor: 'instance creation' stamp: 'FedericoBalaguer 4/23/2012 11:31'!size: string maxSheet: aNumber  ^ self new size: string maxSheet: aNumber! !!PaperType methodsFor: 'accessing' stamp: 'FedericoBalaguer 4/23/2012 11:29'!maxSheetNumber	^ maxSheetNumber! !!PaperType methodsFor: 'accessing' stamp: 'FedericoBalaguer 4/23/2012 11:29'!paperSize	^ paperSize! !!PaperType methodsFor: 'initialize-release' stamp: 'FedericoBalaguer 4/23/2012 11:31'!size: string maxSheet: aNumber	paperSize := string.	maxSheetNumber := aNumber! !TestCase subclass: #BookBindigMultiBookletTest	instanceVariableNames: 'eightPages sevenPages ninePages'	classVariableNames: ''	poolDictionaries: ''	category: 'BookBinding-Test'!!BookBindigMultiBookletTest methodsFor: 'running' stamp: 'FedericoBalaguer 4/26/2012 15:32'!setUp	| pages |	sevenPages := OrderedCollection new.	1 to: 7 do: [ :index | sevenPages  add: (BookPage pageNumber: index) ].	eightPages := OrderedCollection new.	1 to: 8 do: [ :index | eightPages  add: (BookPage pageNumber: index) ].	ninePages := OrderedCollection new.	1 to: 9 do: [ :index | ninePages  add: (BookPage pageNumber: index) ]! !!BookBindigMultiBookletTest methodsFor: 'running' stamp: 'FedericoBalaguer 4/26/2012 15:38'!testEightPagesOneMaxSheets	| binding |	binding := BookBinding pages: eightPages paperType: (PaperType size: 'A4' maxSheet: 1).	self should: [ binding bookpages size = 8 ].	self should: [ binding booklets size = 2 ]! !!BookBindigMultiBookletTest methodsFor: 'running' stamp: 'FedericoBalaguer 4/26/2012 15:38'!testEightPagesTwoMaxSheets	| binding |	binding := BookBinding pages: eightPages paperType: (PaperType size: 'A4' maxSheet: 2).	self should: [ binding bookpages size = 8 ].	self should: [ binding booklets size = 1 ]! !!BookBindigMultiBookletTest methodsFor: 'running' stamp: 'FedericoBalaguer 4/26/2012 15:59'!testNinePagesThreeMaxSheets	| binding |	binding := BookBinding pages: ninePages paperType: (PaperType size: 'A4' maxSheet: 3).	self should: [ binding bookpages size = 12 ].	self should: [ binding booklets size = 1 ]! !TestCase subclass: #BookBindigSimpleTest	instanceVariableNames: 'eightPages sevenPages ninePages'	classVariableNames: ''	poolDictionaries: ''	category: 'BookBinding-Test'!!BookBindigSimpleTest methodsFor: 'running' stamp: 'FedericoBalaguer 4/26/2012 14:38'!setUp	| pages |	sevenPages := OrderedCollection new.	1 to: 7 do: [ :index | sevenPages  add: (BookPage pageNumber: index) ].	eightPages := OrderedCollection new.	1 to: 8 do: [ :index | eightPages  add: (BookPage pageNumber: index) ].	ninePages := OrderedCollection new.	1 to: 9 do: [ :index | ninePages  add: (BookPage pageNumber: index) ]! !!BookBindigSimpleTest methodsFor: 'as yet unclassified' stamp: 'FedericoBalaguer 4/27/2012 11:11'!tearDown	sevenPages := nil.	eightPages := nil.	ninePages := nil! !!BookBindigSimpleTest methodsFor: 'running' stamp: 'FedericoBalaguer 5/3/2012 22:37'!testEightPages	| binding |	binding := BookBinding pages: eightPages paperType: (PaperType size: 'A4' maxSheet: 10).	self should: [ binding bookpages size = 8 ].	self should: [ binding bookpages detect: [ :each | each isBlank ] ] raise: Error! !!BookBindigSimpleTest methodsFor: 'as yet unclassified' stamp: 'FedericoBalaguer 4/27/2012 11:13'!testEightPagesNoWhitePages	| binding |	binding := BookBinding pages: eightPages paperType: (PaperType size: 'A4' maxSheet: 10).	self should: [ binding bookpages size = 8 ].	self should: [ binding bookpages last isBlank not ]! !!BookBindigSimpleTest methodsFor: 'as yet unclassified' stamp: 'FedericoBalaguer 4/27/2012 11:30'!testEightPagesOutOfRange	| binding |	binding := BookBinding pages: eightPages paperType: (PaperType size: 'A4' maxSheet: 10).	self should: [ binding bookpages at: 9 ] raise: Error! !!BookBindigSimpleTest methodsFor: 'as yet unclassified' stamp: 'FedericoBalaguer 5/3/2012 22:32'!testNinePages	| binding |	binding := BookBinding pages: ninePages paperType: (PaperType size: 'A4' maxSheet: 10).	self should: [ binding bookpages size = 12 ].	self should: [ binding bookpages last isBlank ].		! !!BookBindigSimpleTest methodsFor: 'running' stamp: 'FedericoBalaguer 4/26/2012 15:03'!testSevenPages	| binding |	binding := BookBinding pages: sevenPages paperType: (PaperType size: 'A4' maxSheet: 10).	self should: [ binding bookpages size = 8 ].	self should: [ binding bookpages last isBlank ].! !TestCase subclass: #BookletTest	instanceVariableNames: 'fourPageBooklet eightPageBooklet'	classVariableNames: ''	poolDictionaries: ''	category: 'BookBinding-Test'!!BookletTest methodsFor: 'running' stamp: 'FedericoBalaguer 4/24/2012 17:15'!setUp	| pages |	fourPageBooklet := Booklet		withPages:			(OrderedCollection				with: (BookPage pageNumber: 1)				with: (BookPage pageNumber: 2)				with: (BookPage pageNumber: 3)				with: (BookPage pageNumber: 4)).	pages := OrderedCollection new.	1 to: 8 do: [ :index | pages add: (BookPage pageNumber: index) ].	eightPageBooklet := Booklet withPages: pages! !!BookletTest methodsFor: 'as yet unclassified' stamp: 'FedericoBalaguer 4/27/2012 10:57'!tearDown	fourPageBooklet := eightPageBooklet := nil! !!BookletTest methodsFor: 'as yet unclassified' stamp: 'FedericoBalaguer 4/24/2012 17:20'!testEightPagesOrder	| pageNumbers |	pageNumbers := eightPageBooklet printSortedPageNumbers.	self should: [ (pageNumbers at: 1) = 1 ].	self should: [ (pageNumbers at: 2) = 8 ].	self should: [ (pageNumbers at: 3) = 2 ].	self should: [ (pageNumbers at: 4) = 7 ].	self should: [ (pageNumbers at: 5) = 3 ].	self should: [ (pageNumbers at: 6) = 6 ].	self should: [ (pageNumbers at: 7) = 4 ].	self should: [ (pageNumbers at: 8) = 5 ].! !!BookletTest methodsFor: 'as yet unclassified' stamp: 'FedericoBalaguer 4/24/2012 17:17'!testFourPagesOrder	| pageNumbers |	pageNumbers := fourPageBooklet printSortedPageNumbers.	self should: [ (pageNumbers at: 1) = 1 ].	self should: [ (pageNumbers at: 2) = 4 ].	self should: [ (pageNumbers at: 3) = 2 ].	self should: [ (pageNumbers at: 4) = 3 ]! !!BookletTest methodsFor: 'as yet unclassified' stamp: 'FedericoBalaguer 4/24/2012 17:09'!testSize	self should: [ fourPageBooklet size = 4 ]! !